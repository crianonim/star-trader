{"version":3,"sources":["game-logic/trade.js","game-logic/player.js","game-logic/index.js","reducers/rootReducer.js","ActionButton.js","Main.js","App.js","storeInit.js","serviceWorker.js","index.js"],"names":["calculatePrice","planet","item","prices","find","el","getItemCount","inventory","itemName","changePlanetFluct","map","price","changePricePluct","fluct","Math","max","min","rng","canTravel","state","destination","distance","planets","name","place","routes","player","random","rootReducer","action","type","money","rate","fuel","payload","amount","trade","console","log","n","turn","game","ActionButton","children","dispatch","disabled","onClick","turns","Main","props","useDispatch","useSelector","p","key","className","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","storeInit","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b913c1e0.chunk.js","sourcesContent":["export const calculatePrice=(planet,item)=>{\n    const [name,base,fluct]=planet.prices.find(el=>el[0]===item);\n    return (base*10+fluct);\n}","export const getItemCount=(inventory,itemName)=>inventory.find(el=>el[0]===itemName)[1]","\nimport * as player from './player'\n\nexport const turn=(n,state)=>{\n    return {...state,turn:state.turn+n,planets:state.planets.map(planet=>({...planet,prices:changePlanetFluct(planet.prices)}))}\n}\n\nconst changePlanetFluct=(prices=>prices.map( price=>[price[0],price[1],changePricePluct( price[2])] ))\n\nconst changePricePluct=(fluct)=>Math.max(-10,Math.min(10,fluct+(2-rng(5))));\n\nexport const canTravel=(state,destination)=>{\n    const currentPlanet=state.planets.find(el=>el.name===state.place)\n    const distance=currentPlanet.routes.find(el=>el[0]===destination)[1]\n    if (player.getItemCount(state.inventory,'fuel')>=distance) return true;\n    return false;\n}\n\nexport const rng=(max)=>{\n    return (Math.random()*max)>>0\n}","import * as trade from '../game-logic/trade';\nimport * as player from '../game-logic/player';\nimport * as game from '../game-logic/index'\n\nconst rootReducer = (state, action) => {\n    switch (action.type) {\n        case 'INTEREST':\n            return {\n                ...state,\n                money: (state.money * action.rate || 1.01)\n            }\n        case 'RANDOMISE_PRICES':\n\n            return {\n                ...state,\n                inventory:{...state.inventory,fuel:state.inventory.fuel-10},\n                prices: action.prices\n            }\n\n        case 'TRADE':\n            const {amount,item}=action.payload;\n            const {place,planets,money,inventory}=state;\n            const planet=planets.find(el=>el.name===place)\n            const price=trade.calculatePrice(planet,item)\n\n            // console.log(amount,state.inventory[item])\n            //buy\n            if (amount>0){\n                if (price*amount>money){\n                    console.log(\"Not enough money\");\n                    return state;\n                }\n            } else\n            //sell\n            {\n                if (-amount>inventory.find(el=>el[0]===item)[1]) {\n                    console.log(\"Don't have enough items.\")\n                    return state;\n                }\n                \n            }\n            return {...state,money:money-price*amount,inventory:inventory.map(el=>el[0]===item?[el[0],el[1]+amount]:el)}\n\n        case 'TRAVEL':\n            const {destination,distance}=action.payload\n            const fuel=player.getItemCount(state.inventory,\"fuel\")\n            if (fuel<distance) return state;\n            return {...state,inventory:state.inventory.map(el=>el[0]===\"fuel\"?[\"fuel\",fuel-distance]:el),place:destination}\n        case 'TURN':\n            const turns=action.payload\n            return game.turn(turns,state);\n        default:\n            return state;\n    }\n}\n\nexport default rootReducer;","import React from 'react';\n\nconst ActionButton = ({children,dispatch,action,payload,disabled})=>{\n    return (\n        <button disabled={disabled} onClick={()=>{\n            dispatch({type:action,payload})\n            if (payload.turns){\n                dispatch({type:\"TURN\",payload:payload.turns})\n            }\n        }}>{children}</button>\n    )\n}\n\nexport default ActionButton ","import React from 'react'\nimport {useSelector,useDispatch} from 'react-redux';\nimport ActionButton from './ActionButton';\nimport * as trade from './game-logic/trade'\nimport * as game from './game-logic/index';\n\nconst Main = (props)=>{\n    const dispatch=useDispatch();\n    const state=useSelector((state)=>state)\n    const {turn,place}=state;\n    const money=useSelector((state=>state.money))\n    const inventory=useSelector( (state)=>state.inventory);\n    const planets=useSelector( (state)=>state.planets);\n    const planet=planets.find(p=>p.name===place)\n    return (\n        <>\n        <h1>Star Trader</h1>\n        <h2>Turn {turn}, You are on planet {planet.name}</h2>\n        <p>Money: {money}</p>\n        <h3>You have in your inventory:</h3>\n        <ul>\n            {inventory.map(([name,amount])=>(<li key={name}>{name} - {amount}</li>))}\n        </ul>\n        <h3>You can travel to:</h3>\n        <ul>\n        {planet.routes.map( ([name,distance])=>(<li key={name}>{name} - {distance} <ActionButton dispatch={dispatch} disabled={!game.canTravel(state,name)} action=\"TRAVEL\" payload={{destination:name,distance,turns:distance}} >Travel</ActionButton></li>))}\n        </ul>\n        <h3>You can trade here:</h3>\n        <ul>\n            {inventory.map(([name,amount])=>(<li key={name}>{name} - you have: {amount}  price: {trade.calculatePrice(planet,name)} \n             <ActionButton dispatch={dispatch} action=\"TRADE\" payload={{item:name,amount:1}}>Buy</ActionButton>\n             <ActionButton dispatch={dispatch} action=\"TRADE\" payload={{item:name,amount:-1}}>Sell</ActionButton> </li>\n            ))}\n        </ul>\n\n\n\n        {/* <button onClick={()=>dispatch({type:\"INTEREST\",rate:1.06})}>Interest</button>\n        {\n         inventory.fuel>=10?   \n            <button onClick={actions.createActionRandomisePrices(dispatch,prices)}>Travel to a new Planet! (10 fuel)</button>\n            :null\n        } */}\n\n        <div className=\"list\">\n            {/* <h4>Commodities</h4>\n            <ul>\n\n            {Object.entries(inventory).map(([item,amount])=>\n                (<li key={item}>\n                    {item} : ({amount}) cost: {prices[item]} \n                    <button onClick={()=>dispatch({type:\"TRADE\",payload:{item,amount:1,price:prices[item]}})}>Buy</button>\n                    <button onClick={()=>dispatch({type:\"TRADE\",payload:{item,amount:-1,price:prices[item]}})}>Sell</button>\n                    <ActionButton dispatch={dispatch} action=\"TRADE\" payload={{item,amount:2}}>+Buy</ActionButton>\n                    <ActionButton dispatch={dispatch} action=\"TRADE\" payload={{item,amount:-2}}>+Sell</ActionButton>\n\n                </li>)\n            )}\n            </ul> */}\n        </div>\n        </>\n    )\n}\n\nexport default Main","import React from 'react';\nimport './App.css';\nimport {Provider} from 'react-redux';\nimport storeInit from './storeInit'\n\nimport Main from './Main';\n\nconst store=storeInit();\n\nfunction App() {\n  return (\n\n    <Provider store={store}>\n     <div className=\"App\">\n       <Main></Main>\n     </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import {\n    createStore\n} from 'redux';\nimport rootReducer from \"./reducers/rootReducer\";   \n\n\nconst storeInit=()=>{\n\n    const store = createStore(rootReducer, {\n        money: 500,\n        turn:1,\n        place:\"Ereb\",\n        planets:[\n            {\n                name:\"Ereb\",\n                prices:[\n                    [\"fuel\",5,0],\n                    [\"food\",3,-2],\n                    [\"electronics\",7,0],\n                    [\"minerals\",6,0]\n                ],\n                routes:[\n                    [\"Dokav\",10],\n                    [\"Inwe\",20]\n                ]\n            },\n            {\n                name:\"Dokav\",\n                prices:[\n                    [\"fuel\",5,0],\n                    [\"food\",7,0],\n                    [\"electronics\",4,0],\n                    [\"minerals\",6,0]\n                ],\n                routes:[\n                    [\"Ereb\",10],\n                ]\n            },\n            {\n                name:\"Inwe\",\n                prices:[\n                    [\"fuel\",5,0],\n                    [\"food\",6,0],\n                    [\"electronics\",5,0],\n                    [\"minerals\",3,0]\n                ],\n                routes:[\n                    [\"Ereb\",20],\n                ]\n            },\n        ],\n        \n        inventory: [\n            [\"fuel\", 30],\n            [\"food\", 0],\n            [\"electronics\", 0],\n            [\"minerals\", 20]\n        ]\n    },\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n    return store;\n}\n\n\n// console.log(store.getState())\n// store.dispatch({type:\"INTEREST\",rate:1.20})\n// console.log(store.getState())\n\nexport default storeInit","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}