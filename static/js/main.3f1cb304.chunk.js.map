{"version":3,"sources":["reducers/rootReducer.js","reducers/actionCreators.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["rootReducer","state","action","type","money","rate","inventory","fuel","prices","payload","price","amount","item","console","log","changePrice","n","Math","random","max","min","createActionRandomisePrices","dispatch","newPrices","Object","fromEntries","entries","map","Main","props","useDispatch","useSelector","onClick","actions","className","key","randInt","store","createStore","food","electronics","minerals","window","__REDUX_DEVTOOLS_EXTENSION__","getState","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f1cb304.chunk.js","sourcesContent":["const rootReducer = (state, action) => {\n    switch (action.type) {\n        case 'INTEREST':\n            return {\n                ...state,\n                money: (state.money * action.rate || 1.01)\n            }\n            break;\n        case 'RANDOMISE_PRICES':\n\n            return {\n                ...state,\n                inventory:{...state.inventory,fuel:state.inventory.fuel-10},\n                prices: action.prices\n            }\n\n            break;\n        case 'TRADE':\n            const {price,amount,item}=action.payload;\n\n            console.log(amount,state.inventory[item])\n            //buy\n            if (amount>0){\n                if (price*amount>state.money){\n                    console.log(\"Not enough money\");\n                    return state;\n                }\n            } else\n            //sell\n            {\n                if (-amount>state.inventory[item]) {\n                    console.log(\"Don't have enough items.\")\n                    return state;\n                }\n                \n            }\n            return {...state,money:state.money-price*amount,inventory:{...state.inventory,[item]:state.inventory[item]+amount}}\n\n            break;\n        default:\n            return state;\n    }\n}\n\nexport default rootReducer;","import 'redux'\n\n\nconst changePrice= (n)=>{\n    const price=n+2-((Math.random()*5)>>0);\n    return Math.max(1,Math.min(10,price))\n}\nexport const createActionRandomisePrices=(dispatch,prices)=>{\n    return ()=>{\n        const newPrices=Object.fromEntries(Object.entries(prices).map(([item,price])=>[item,changePrice(price)]))\n        console.log({newPrices});\n        dispatch({type:\"RANDOMISE_PRICES\",prices:newPrices})\n    }\n}","import React from 'react'\nimport {useSelector,useDispatch} from 'react-redux';\nimport * as actions from './reducers/actionCreators';\nconst Main = (props)=>{\n    const dispatch=useDispatch();\n    const money=useSelector((state=>state.money))\n    const inventory=useSelector( (state)=>state.inventory);\n    const prices=useSelector( (state)=>state.prices);\n    return (\n        <>\n        <p>Money: {money}</p>\n        {/* <button onClick={()=>dispatch({type:\"INTEREST\",rate:1.06})}>Interest</button> */}\n        {\n         inventory.fuel>=10?   \n            <button onClick={actions.createActionRandomisePrices(dispatch,prices)}>Travel to a new Planet! (10 fuel)</button>\n            :null\n        }\n\n        <div className=\"list\">\n            <h4>Commodities</h4>\n            <ul>\n\n            {Object.entries(inventory).map(([item,amount])=>\n                (<li key={item}>\n                    {item} : ({amount}) cost: {prices[item]} \n                    <button onClick={()=>dispatch({type:\"TRADE\",payload:{item,amount:1,price:prices[item]}})}>Buy</button>\n                    <button onClick={()=>dispatch({type:\"TRADE\",payload:{item,amount:-1,price:prices[item]}})}>Sell</button>\n\n                </li>)\n            )}\n            </ul>\n        </div>\n        </>\n    )\n}\n\nexport default Main","import React from 'react';\nimport './App.css';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\n\nimport Main from './Main';\nconst randInt=(max)=>(Math.random()*max)>>0;\nconst store=createStore(rootReducer,{\n  prices:{\n    fuel:randInt(10),\n    food:randInt(10),\n    electronics:randInt(10),\n    minerals:randInt(10)\n  },\n  money:50,\n  inventory:{\n    fuel:100,\n    food:0,\n    electronics:0,\n    minerals:20\n  }\n},\nwindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nconsole.log(store.getState())\nstore.dispatch({type:\"INTEREST\",rate:1.20})\nconsole.log(store.getState())\n\nfunction App() {\n  return (\n\n    <Provider store={store}>\n     <div className=\"App\">\n       <Main></Main>\n     </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}